package main

import (
	"fmt"
	"strconv"
)

type Intcode []int

func runv2(intcode Intcode, input int) string {
	output := ""
	immediate := 1
	pos := 0

	trial := make(Intcode, len(intcode))
	for i := 0; i < len(intcode); i++ {
		trial[i] = intcode[i]
	}

Loop:
	for pos < len(trial) {
		mode1 := 0
		mode2 := 0
		oppcode := trial[pos]
		if oppcode > 99 {
			s := strconv.Itoa(oppcode)
			oppcode, _ = strconv.Atoi(s[len(s)-2:])
			mode1, _ = strconv.Atoi(string(s[len(s)-3]))
			if len(s) > 3 {
				mode2, _ = strconv.Atoi(string(s[len(s)-4]))
			}
		}

		// parameters, modes
		var p1 int
		var p2 int
		if pos+1 < len(trial) {
			p1 = trial[pos+1]
			if mode1 != immediate && p1 < len(trial) {
				p1 = trial[p1]
			}
		}
		if pos+2 < len(trial) {
			p2 = trial[pos+2]
			if mode2 != immediate && p2 < len(trial) {
				p2 = trial[p2]
			}
		}

		switch oppcode {
		case 1: // add (3)
			trial[trial[pos+3]] = p1 + p2
			pos += 3 + 1 // move forward 3 parameters + 1 oppcode position
			break
		case 2: // multiply (3)
			trial[trial[pos+3]] = p1 * p2
			pos += 3 + 1
			break
		case 3: // input (1)
			trial[trial[pos+1]] = input
			pos += 1 + 1 // move forward 1 parameter + 1 oppcode position, etc.
			break
		case 4: // output (1)
			output = output + " " + strconv.Itoa(p1)
			pos += 1 + 1
			break
		case 5: // jump-if-true (2)
			if p1 != 0 {
				pos = p2
			} else {
				pos += 2 + 1
			}
			break
		case 6: // jump-if-false (2)
			if p1 == 0 {
				pos = p2
			} else {
				pos += 2 + 1
			}
			break
		case 7: // less-than (3)
			if p1 < p2 {
				trial[trial[pos+3]] = 1
			} else {
				trial[trial[pos+3]] = 0
			}
			pos += 3 + 1
			break
		case 8: // equals (3)
			if p1 == p2 {
				trial[trial[pos+3]] = 1
			} else {
				trial[trial[pos+3]] = 0
			}
			pos += 3 + 1
			break
		case 99: // exit
			break Loop
		default:
			panic("help Iâ€™m dying")
		}
	}

	return output
}

func main() {
	intcode := Intcode{
		3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1, 192, 154, 224, 101, -161, 224, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1001, 157, 48, 224, 1001, 224, -61, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 223, 224, 223, 1102, 15, 28, 225, 1002, 162, 75, 224, 1001, 224, -600, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 102, 32, 57, 224, 1001, 224, -480, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1101, 6, 23, 225, 1102, 15, 70, 224, 1001, 224, -1050, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 101, 53, 196, 224, 1001, 224, -63, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 3, 224, 1, 224, 223, 223, 1101, 64, 94, 225, 1102, 13, 23, 225, 1101, 41, 8, 225, 2, 105, 187, 224, 1001, 224, -60, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 10, 23, 225, 1101, 16, 67, 225, 1101, 58, 10, 225, 1101, 25, 34, 224, 1001, 224, -59, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 3, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1108, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 329, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 344, 1001, 223, 1, 223, 107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 359, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 374, 101, 1, 223, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 404, 101, 1, 223, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 419, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 434, 1001, 223, 1, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 449, 101, 1, 223, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 479, 1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 101, 1, 223, 223, 1008, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 101, 1, 223, 223, 1107, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 524, 1001, 223, 1, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 539, 1001, 223, 1, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 554, 1001, 223, 1, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 569, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 584, 101, 1, 223, 223, 1008, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 599, 101, 1, 223, 223, 1007, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 614, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 629, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 644, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
	}

	// part 1
	fmt.Println("Day 05, Part 1:")
	fmt.Println(runv2(intcode, 1))

	// part 2
	fmt.Println("Day 05, Part 2:")
	fmt.Println(runv2(intcode, 5))
}
